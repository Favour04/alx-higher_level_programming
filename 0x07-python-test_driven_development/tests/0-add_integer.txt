The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

This is an 0-add_integer text file in reStructuredText format.  First import
``add_integer`` from the ``example`` module:

>>> add_integer = __import__("0-add_integer").add_integer

Now the test:

>>> add_integer(1, -2)
-1
>>> add_integer(a, b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
>>> add_integer()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 1 required positional argument: 'a'
>>> add_integer(1, 'a')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/favour/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 8, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> m = 1
>>> n = 2
>>> add_integer(m, n)
3
>>> add_integer(2, 3, 4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
>>> add_integer(0.0/0.0, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: float division by zero
>>> add_integer(float('inf'), 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/favour/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 23, in add_integer
    a = int(a)
OverflowError: cannot convert float infinity to integer
